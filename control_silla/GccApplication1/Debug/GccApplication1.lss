
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000254  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001e0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  00000254  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000254  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000284  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  000002c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000764  00000000  00000000  0000032c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000619  00000000  00000000  00000a90  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003ec  00000000  00000000  000010a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d0  00000000  00000000  00001498  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003a3  00000000  00000000  00001568  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000015  00000000  00000000  0000190b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00001920  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a3 30       	cpi	r26, 0x03	; 3
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 b7 00 	call	0x16e	; 0x16e <main>
  88:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_21>:
}



ISR(ADC_vect)
{
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	8f 93       	push	r24
  9c:	ef 93       	push	r30
  9e:	ff 93       	push	r31
	if (derecho){
  a0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <derecho>
  a4:	88 23       	and	r24, r24
  a6:	51 f0       	breq	.+20     	; 0xbc <__vector_21+0x2c>
		ADMUX = 0<<REFS1| 1<<REFS0| 1<<ADLAR| 0<<MUX3| 1<<MUX2| 0<<MUX1| 0<<MUX0;
  a8:	84 e6       	ldi	r24, 0x64	; 100
  aa:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
		derecho = 0;
  ae:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <derecho>
		valor_sensor_derecho = ADCH;
  b2:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
  b6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
  ba:	0a c0       	rjmp	.+20     	; 0xd0 <__vector_21+0x40>
	}else{
		ADMUX = 0<<REFS1| 1<<REFS0| 1<<ADLAR| 0<<MUX3| 0<<MUX2| 0<<MUX1| 0<<MUX0;
  bc:	80 e6       	ldi	r24, 0x60	; 96
  be:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
		derecho = 1;
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <derecho>
		valor_sensor_izquierdo = ADCH;
  c8:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
  cc:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <valor_sensor_izquierdo>
	}
	ADCSRA |= 1<<ADSC;
  d0:	ea e7       	ldi	r30, 0x7A	; 122
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	80 81       	ld	r24, Z
  d6:	80 64       	ori	r24, 0x40	; 64
  d8:	80 83       	st	Z, r24
}
  da:	ff 91       	pop	r31
  dc:	ef 91       	pop	r30
  de:	8f 91       	pop	r24
  e0:	0f 90       	pop	r0
  e2:	0f be       	out	0x3f, r0	; 63
  e4:	0f 90       	pop	r0
  e6:	1f 90       	pop	r1
  e8:	18 95       	reti

000000ea <pins_configurations_init>:

void pins_configurations_init(void){
	DIDR0 = 0xFF;			//Este registro desactiva las entradas digitales de todos los ADCs, con esto se ahorra energia.
  ea:	8f ef       	ldi	r24, 0xFF	; 255
  ec:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f807e>
	DDRC = 0b11101110;			//Se configura los pines 0 y 4 como entrada, el resto como salida
  f0:	9e ee       	ldi	r25, 0xEE	; 238
  f2:	97 b9       	out	0x07, r25	; 7
	PORTC = 0x00;		//Se configura la resistencia de pull-up; esto ahorra energia y protege las entradas del uC
  f4:	18 b8       	out	0x08, r1	; 8
	DDRD = 0xFF;			// se configura el puerto como salida
  f6:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0xFF;			//se configura el puerto como salida
  f8:	84 b9       	out	0x04, r24	; 4
  fa:	08 95       	ret

000000fc <ADC_init>:
}

void ADC_init(void){
	ADMUX = (0<<REFS1| 1<<REFS0| 1<<ADLAR| 0<<MUX3| 1<<MUX2| 0<<MUX1| 0<<MUX0); /* Se
  fc:	84 e6       	ldi	r24, 0x64	; 100
  fe:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	*configura inicialmente el puerto PC4 como entrada analogica
	*se configura como voltaje de referencia AVcc con capacitor externo
	*se realiza el ajuste de hacia la izquierda del registro de resultado del ADC*/
	
	ADCSRA |= (0<<ADATE |1<< ADIE| 1<<ADPS2|1<< ADPS1|1<< ADPS0);/*
 102:	ea e7       	ldi	r30, 0x7A	; 122
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	80 81       	ld	r24, Z
 108:	8f 60       	ori	r24, 0x0F	; 15
 10a:	80 83       	st	Z, r24
	*Se deshabilita el auto-trigger
	*Se habilita la interrupciones del ADC
	*Se habilita el prescaler del ADC en el maximo */
	sei();/* Se habilitan las interrupciones globales del microcontrolador*/
 10c:	78 94       	sei
	ADCSRA |= (1<<ADEN |1<<ADSC);/*
 10e:	80 81       	ld	r24, Z
 110:	80 6c       	ori	r24, 0xC0	; 192
 112:	80 83       	st	Z, r24
 114:	08 95       	ret

00000116 <PWM_OC0AB_init>:
	*Se inicia la conversion del ADC*/
	
}

void PWM_OC0AB_init(void){
	TCCR0A = 1<< COM0A1 | 0<< COM0A0 |1<< COM0B1| 0<<COM0B0 |1<<WGM01|1<< WGM00 ;
 116:	83 ea       	ldi	r24, 0xA3	; 163
 118:	84 bd       	out	0x24, r24	; 36
	TCCR0B =  0<<WGM02| 1<<CS02 |0<<CS01|0<< CS00;  //prescaler a 256
 11a:	84 e0       	ldi	r24, 0x04	; 4
 11c:	85 bd       	out	0x25, r24	; 37
	OCR0A = 0;
 11e:	17 bc       	out	0x27, r1	; 39
	OCR0B = 0;
 120:	18 bc       	out	0x28, r1	; 40
 122:	08 95       	ret

00000124 <PWM_OC2AB_init>:
}

void PWM_OC2AB_init(void){
	TCCR2A = 1<< COM2A1 | 0<<COM2A0	|1<< COM2B1|0<< COM2B0 |1<< WGM21| 1<<WGM20;
 124:	83 ea       	ldi	r24, 0xA3	; 163
 126:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
	TCCR2B |= 0<<WGM22|1<< CS22|1<< CS21|0<< CS20;
 12a:	e1 eb       	ldi	r30, 0xB1	; 177
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	80 81       	ld	r24, Z
 130:	86 60       	ori	r24, 0x06	; 6
 132:	80 83       	st	Z, r24
	OCR2A = 0;
 134:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	OCR2B = 0;
 138:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
 13c:	08 95       	ret

0000013e <adelante_A>:
}

void adelante_A(int valor_pwm){
	PORTC |= EN_A ;
 13e:	41 9a       	sbi	0x08, 1	; 8
	RPWMA = valor_pwm;
 140:	87 bd       	out	0x27, r24	; 39
	LPWMA = 0xFF;	
 142:	8f ef       	ldi	r24, 0xFF	; 255
 144:	88 bd       	out	0x28, r24	; 40
 146:	08 95       	ret

00000148 <adelante_B>:
}
void adelante_B(int valor_pwm){
	PORTC |= EN_B;
 148:	45 9a       	sbi	0x08, 5	; 8
	RPWMB = valor_pwm;
 14a:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	LPWMB = 0xFF;
 14e:	8f ef       	ldi	r24, 0xFF	; 255
 150:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
 154:	08 95       	ret

00000156 <atras_A>:
}

void atras_A(int valor_pwm){
	PORTC |= EN_A;
 156:	41 9a       	sbi	0x08, 1	; 8
	RPWMA = 0xFF;
 158:	9f ef       	ldi	r25, 0xFF	; 255
 15a:	97 bd       	out	0x27, r25	; 39
	LPWMA = valor_pwm;
 15c:	88 bd       	out	0x28, r24	; 40
 15e:	08 95       	ret

00000160 <atras_B>:
}

void atras_B(int valor_pwm){
	PORTC |= EN_B;
 160:	45 9a       	sbi	0x08, 5	; 8
	RPWMB = 0xFF;
 162:	9f ef       	ldi	r25, 0xFF	; 255
 164:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	LPWMB = valor_pwm;
 168:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
 16c:	08 95       	ret

0000016e <main>:



int main(void)
{
	pins_configurations_init();
 16e:	0e 94 75 00 	call	0xea	; 0xea <pins_configurations_init>
	ADC_init();
 172:	0e 94 7e 00 	call	0xfc	; 0xfc <ADC_init>
	PWM_OC0AB_init();
 176:	0e 94 8b 00 	call	0x116	; 0x116 <PWM_OC0AB_init>
	PWM_OC2AB_init();
 17a:	0e 94 92 00 	call	0x124	; 0x124 <PWM_OC2AB_init>
	{
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
			adelante_A(valor_sensor_derecho);
			adelante_B(valor_sensor_izquierdo);
		}
		PORTC = 0x00F;
 17e:	df e0       	ldi	r29, 0x0F	; 15
	ADC_init();
	PWM_OC0AB_init();
	PWM_OC2AB_init();
	while (1)
	{
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
 180:	cf b7       	in	r28, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 182:	f8 94       	cli
			adelante_A(valor_sensor_derecho);
 184:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	0e 94 9f 00 	call	0x13e	; 0x13e <adelante_A>
			adelante_B(valor_sensor_izquierdo);
 18e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <valor_sensor_izquierdo>
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	0e 94 a4 00 	call	0x148	; 0x148 <adelante_B>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 198:	cf bf       	out	0x3f, r28	; 63
		}
		PORTC = 0x00F;
 19a:	d8 b9       	out	0x08, r29	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 19c:	2f e3       	ldi	r18, 0x3F	; 63
 19e:	8d e0       	ldi	r24, 0x0D	; 13
 1a0:	93 e0       	ldi	r25, 0x03	; 3
 1a2:	21 50       	subi	r18, 0x01	; 1
 1a4:	80 40       	sbci	r24, 0x00	; 0
 1a6:	90 40       	sbci	r25, 0x00	; 0
 1a8:	e1 f7       	brne	.-8      	; 0x1a2 <main+0x34>
 1aa:	00 c0       	rjmp	.+0      	; 0x1ac <main+0x3e>
 1ac:	00 00       	nop
		_delay_ms(1000);
		
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
 1ae:	cf b7       	in	r28, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 1b0:	f8 94       	cli
			atras_A(valor_sensor_derecho);
 1b2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	0e 94 ab 00 	call	0x156	; 0x156 <atras_A>
			atras_B(valor_sensor_izquierdo);
 1bc:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <valor_sensor_izquierdo>
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	0e 94 b0 00 	call	0x160	; 0x160 <atras_B>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 1c6:	cf bf       	out	0x3f, r28	; 63
 1c8:	2f e3       	ldi	r18, 0x3F	; 63
 1ca:	8d e0       	ldi	r24, 0x0D	; 13
 1cc:	93 e0       	ldi	r25, 0x03	; 3
 1ce:	21 50       	subi	r18, 0x01	; 1
 1d0:	80 40       	sbci	r24, 0x00	; 0
 1d2:	90 40       	sbci	r25, 0x00	; 0
 1d4:	e1 f7       	brne	.-8      	; 0x1ce <main+0x60>
 1d6:	00 c0       	rjmp	.+0      	; 0x1d8 <main+0x6a>
 1d8:	00 00       	nop
 1da:	d2 cf       	rjmp	.-92     	; 0x180 <main+0x12>

000001dc <_exit>:
 1dc:	f8 94       	cli

000001de <__stop_program>:
 1de:	ff cf       	rjmp	.-2      	; 0x1de <__stop_program>
